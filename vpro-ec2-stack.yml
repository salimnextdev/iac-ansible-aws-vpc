---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC Setup Variables
      include_vars: vars/vpc-output_vars

    - name: Import Vprofile setup Variable
      include_vars: vars/vprostacksetup

    - name: Create Vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{region}}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: Create Security Group for Load Balancer
      ec2_group:
        name: ELBSG
        description: Allow Port 80 from everywhere and all ports within sg
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create Security Group for VProfile Stack
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere and within sg
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: vprostackSG_out

    - name: Create Security Group for VProfile Stack
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere and within sg
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vprostackSG_out.group_id}}"

    - name: Creating Nginx web01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{nginx_ami}}"
        tags:
          Name: "Bastion_host"
          Project: Vprofile
          Owner: Ansible Team
          group_id: "{{vprostackSG_out.group_id}}"
          vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Creating tomcat app01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: Ansible Team
          group_id: "{{vprostackSG_out.group_id}}"
          vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Creating memcache mc01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: Ansible Team
          group_id: "{{vprostackSG_out.group_id}}"
          vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: Ansible Team
          group_id: "{{vprostackSG_out.group_id}}"
          vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating MySQL db01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: Ansible Team
          group_id: "{{vprostackSG_out.group_id}}"
          vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.instance_ids[0]

    - name: Create Network Load Balancer
      community.aws.elb_network_lb:
        name: "vprofile-elb"
        state: present
        scheme: internet-facing
        purge_instance_ids: true
        security_group_ids: "{{vprostackSG_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
      register: nlb

    - name: Create an ELB and attach a listener
      community.aws.elb_network_lb:
        name: vprofile-elb
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - Protocol: TCP # Required. The protocol for connections from clients to the load balancer (TCP, TLS, UDP or TCP_UDP) (case-sensitive).
            Port: 80 # Required. The port on which the load balancer is listening.
            instance_port: 80
            DefaultActions:
              - Type: forward # Required. Only 'forward' is accepted at this time
                TargetGroupName: mytargetgroup # Required. The name of the target group
        state: present
        purge_listeners: true

    - name: Attach security group to Vprofile-ELB
      elb_application_lb:
        name: "vprofile-elb"  # Replace with your ELB name
        security_groups:
          - "{{vprostackSG_out.group_id}}" # Replace with your security group ID
        state: present
        region: us-east-1  # Replace with your AWS region
      register: elb_result

    - debug:
        var: elb_result



